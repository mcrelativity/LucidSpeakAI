-- ==============================================================================
-- Pro Tier Tables Setup for Supabase
-- Run this in Supabase SQL Editor to create the required tables
-- Compatible with existing LucidSpeak schema
-- ==============================================================================

-- Table to track pro audio analyses
CREATE TABLE IF NOT EXISTS public.pro_analyses (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_email text NOT NULL,
    recording_id uuid,
    job_id text NOT NULL UNIQUE,
    status text NOT NULL DEFAULT 'queued', -- queued, processing, completed, failed, cancelled
    result jsonb, -- Stores the full analysis result from ProAudioAnalyzer
    error text, -- Error message if status is 'failed'
    created_at bigint NOT NULL, -- Unix timestamp for quota tracking
    started_at bigint, -- Unix timestamp when processing started
    completed_at bigint, -- Unix timestamp when processing completed
    progress integer DEFAULT 0, -- 0-100 percentage
    updated_at timestamp with time zone DEFAULT now(),
    
    CONSTRAINT pro_analyses_pkey PRIMARY KEY (id),
    CONSTRAINT pro_analyses_user_email_fkey FOREIGN KEY (user_email) REFERENCES public.users(email) ON DELETE CASCADE,
    CONSTRAINT pro_analyses_recording_id_fkey FOREIGN KEY (recording_id) REFERENCES public.recordings(id) ON DELETE SET NULL
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_pro_analyses_user_email ON public.pro_analyses(user_email);
CREATE INDEX IF NOT EXISTS idx_pro_analyses_job_id ON public.pro_analyses(job_id);
CREATE INDEX IF NOT EXISTS idx_pro_analyses_status ON public.pro_analyses(status);
CREATE INDEX IF NOT EXISTS idx_pro_analyses_created_at ON public.pro_analyses(created_at);
CREATE INDEX IF NOT EXISTS idx_pro_analyses_user_monthly ON public.pro_analyses(user_email, created_at);

-- Enable RLS on pro_analyses table
ALTER TABLE public.pro_analyses ENABLE ROW LEVEL SECURITY;

-- RLS Policy: Users can only see their own analyses
CREATE POLICY "Users can view their own analyses" ON public.pro_analyses
    FOR SELECT
    USING (user_email = auth.email());

-- RLS Policy: Users can insert their own analyses
CREATE POLICY "Users can insert their own analyses" ON public.pro_analyses
    FOR INSERT
    WITH CHECK (user_email = auth.email());

-- RLS Policy: Users can update their own analyses
CREATE POLICY "Users can update their own analyses" ON public.pro_analyses
    FOR UPDATE
    USING (user_email = auth.email());

-- Add RLS policy for service role (backend can insert/update)
CREATE POLICY "Service role can manage analyses" ON public.pro_analyses
    FOR ALL
    TO service_role
    USING (true)
    WITH CHECK (true);

-- ==============================================================================
-- Notes:
-- 1. All timestamps are Unix timestamps (bigint) to match existing schema
-- 2. user_email is text to match users table
-- 3. The 'job_id' is a text UUID string generated by the job queue system
-- 4. The 'result' JSONB column stores the complete analysis from ProAudioAnalyzer
-- 5. Row Level Security (RLS) ensures users only see their own data
-- 6. Indexes are optimized for: monthly quota checking, job lookups, status queries
-- 7. recording_id is optional (nullable) - analysis can exist without recording link
-- ==============================================================================
